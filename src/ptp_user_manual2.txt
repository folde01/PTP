Plain Text Police (PTP) User Manual - for demonstration purposes only

PTP was developed to run on a physical x86_64 PC running the Ubuntu 16.04 Desktop OS. This system is referred to as the PTP host system. The host system needs to have a Wi-Fi interface connected to the Internet. This manual assumes a fresh installation of Ubuntu 16.04 Desktop and that you are logged in locally on that system. It is fine to be non-root user, but you will need sudo access.
 
The term 'Target Device' refers to the mobile device being monitored by PTP. This manual shows you how to use a virtual or a physical Target Device. If it's physical, the device needs to be able to connect to the PTP host system. This may not be possible on enterprise Wi-Fi systems (e.g. Eduroam) unless you request such access from your firewall administrator - a home Wi-Fi router should not have that problem. In any case, this won't be important until later. First let's set up the host system.

Make sure the host system is up to date first by running OS updates. Open a Terminal and run these commands:

sudo apt-get update
sudo apt-get dist-upgrade
sudo reboot

When the system comes up, insert the accompanying USB stick. It has one file on it: ptp.tar

Copy that file into your home folder and untar it. Back in a Terminal session:

cd ~
tar xf ptp.tar

This should create a folder in your home folder called 'ptp'. Now set an environment variable you'll use later for installing some prerequisites:

PTP_HOME=$HOME/PTP

Now install MySQL, setting the password for MySQL user 'root' to 'password' when asked. (Note: PTP's settings for these credentials are in ptp_stream_db.py if you want to change them.) 

sudo apt-get install mysql-server -y

Install and configure the PPP VPN server, which we'll connect your Target Device through later on:

sudo apt-get install pptpd -y
cd /etc/ppp
sudo cp pptpd-options pptpd-options.orig
sudo cp $PTP_HOME/pptpd/pptpd-options .
sudo cp chap-secrets chap-secrets.orig
sudo echo "vpnuser pptpd password *" > chap-secrets

Note the contents of the chap-secrets file you just made. You will use the VPN name 'vpnuser' and the VPN password 'password' later on when you configure the Target Device's VPN client. Feel free to change these values in chap-secrets now if you want them to be different later. 

More prerequisites to for the Python modules we are using:

sudo apt-get -y install libnet1-dev ntp libmysqlclient-dev python-dev python-pip libpcap-dev pkg-config libglib2.0-dev

And the modules themselves:

python -m pip install flask scapy psutil netifaces mysqlclient

We need to download and install Pcapy from source:

sudo apt-get install git -y
cd /tmp
git clone https://github.com/CoreSecurity/pcapy.git
cd pcapy
sudo python setup.py install

Now that the prerequisites for PTP are installed, let's set up the underlying network so that we can connect a physical Target Device.

cd $PTP_HOME/src
./ptp_networking.sh physical

You should get output like this:

	Checking Internet connectivity...
	Configuring networking for physical Target Device.

	Connect your physical Target Device's VPN to this IP address:
	192.168.1.4

It's time to set up the VPN on your physical Target Device. You'll need that IP address, plus the VPN name and password from earlier: 'vpnuser' and 'password'.

On an Android device, under your Settings, find the VPN settings. Create a new VPN profile, and provide the username, password and IP address as above, and the type PPTP. Ensure you are not using PPP encryption (MPPE). Now connect via the VPN. 

When you've done that, we can start PTP. Again, in a Terminal on the host system:


./ptp_start.sh physical

You should see output like this:

	Creating ptp database...
		...skipping database creation as it already exists.
	Dropping streams table...
		...done.
	Creating streams table...
		...done.
	[sudo] password for jesse: 
	 * Serving Flask app "ptp_controller" (lazy loading)
	 * Environment: production
	   WARNING: Do not use the development server in a production environment.
	   Use a production WSGI server instead.
	 * Debug mode: off
	 * Running on http://localhost:5000/ (Press CTRL+C to quit)



Copy the URL from that last line into a web browser, and you should see the PTP start screen, where you can follow the instructions and use PTP. To quit PTP, type Control-C in the Terminal window where you started it.

Please be aware that TCP traffic from the host system is picked up by PTP, so avoid using the Internet from the host system while you monitor your Target Device with PTP. However, this is not the case for when you are using PTP with a virtual Target Device, described next.


First you will need to install Android Studio from https://developer.android.com/studio/ ensuring first that you have the required Java SDK version installed. In Android Studio under Tools, create a new virtual device. The one used successfully in development of PTP had the following specifications, which are recommended:

Name: Nexus_5_API_24    <----- you'll need this name momentarily when you start it!
Type: Nexus 5
API: 24
Target: Android 7.0
CPU/ABI: x86

With your virtual Target Device now set up, you'll now need to configure PTP's underlying network to support this device. We'll use the same script we used for the physical Target Device, but now for a virtual one:

./ptp_networking.sh virtual

Also, if the following wasn't already set during the Android Studio installation, set it so that we know where to find the Android SDK (the installer should have put installed the SDK in your home folder under $HOME/Android/Sdk):

export ANDROID_HOME=$HOME/Android/Sdk

Now we're ready to start the virtual Target Device. First, have Android Studio running, and AVD Manager. Then start the virtual device from the Terminal window (we need to start it this way, rather than through AVD Manager, so that it uses our bespoke network configuration):


export LD_LIBRARY_PATH=$ANDROID_HOME/emulator/lib64:$ANDROID_HOME/emulator/lib64/qt/lib
$ANDROID_HOME/emulator/qemu/linux-x86_64/qemu-system-i386 -avd Nexus_5_API_24 -qemu -net nic,model=virtio -net tap,ifname=tap0,script=no,downscript=no



The virtual device should start up and it should connect to the Internet. Now start up PTP to monitor a virtual device:

./ptp_start.sh virtual

You'll then browse to the same starting URL in a browser on the host system, just as you did before when monitoring a physical Target Device. You'll use PTP in the same way as you did then.

If you have problems with the virtual device and need to start fresh, it can be useful to shut it down, and then go into AVD Manager, and under this device, look in the Actions column. A disclosure arrow pointing down will show you a menu which has the item 'Wipe data', which will reset any configuration that may have stopped e.g. the networking from working.
